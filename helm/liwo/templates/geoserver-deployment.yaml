apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.prefix }}-{{ .Values.geoserver.name }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
{{- if not .Values.geoserver.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
{{- if not .Values.RWS}}
  strategy:
   type: Recreate
{{- end}}
  selector:
    matchLabels:
      app: {{ .Values.prefix }}-{{ .Values.geoserver.name }}
  template:
    metadata:
    {{- with .Values.geoserver.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        app: {{ .Values.prefix }}-{{ .Values.geoserver.name }}
    spec:
      volumes:
        - name: config
          configMap:
            defaultMode: 0700
            name: {{ .Values.prefix }}-{{ .Values.geoserver.name }}-init-configmap
        - name: google-cred
          secret:
            secretName: {{ .Values.prefix }}-google-secret         
        - name: geoserver-volume
        {{- if .Values.RWS }}
          nfs:
            server: {{ .Values.nfs.server }}
            path: {{ .Values.nfs.path }}
        {{- else }}
          persistentVolumeClaim:
            claimName: {{ .Values.prefix }}-{{ default "pvc-geoserver" .Values.geoserver.volumeName }}
        {{- end }}
      containers:
        - name: {{ .Values.geoserver.name }}
          image: "{{ .Values.images.geoserver.repository }}:{{ .Values.images.geoserver.tag }}"
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          ports:
            - containerPort: {{ .Values.geoserver.service.port }}
          volumeMounts:
            - name: geoserver-volume
              mountPath: /var/local/geoserver
              subPath: geoserver/data
          resources:
            {{- toYaml .Values.geoserver.resources | nindent 12 }}
          env:
            {{- range .Values.geoserver.environment_variables }}
            - name: {{ .key }}
              value: {{ .value | quote }}
            {{- end }}
          readinessProbe:
            httpGet:
              path: /geoserver/web/
              port: {{ .Values.geoserver.service.port }}
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            failureThreshold: 10
      initContainers:
        - name: download-data
          image: "{{ .Values.images.init.repository }}:{{ .Values.images.init.tag }}"
          command: ['/bin/entrypoint.sh']
          # args:
          #   - 'test ! -f geoserver/{{ .Values.datasets.geoserver.data }} &&
          #   - mkdir -p geoserver &&
          #   - echo "download geoserver data" &&
          #   - gsutil cp gs://liwo-data/{{ .Values.datasets.geoserver.data }} geoserver/{{ .Values.datasets.geoserver.data }} &&
          #   - cd geoserver && unzip -o {{ .Values.datasets.geoserver.data }}'        
          workingDir: /data
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/root/creds/google_credentials.json"
            - name: GEOSERVER_DATA_DIR
              value: /data
            - name: POSTGRES_DB
              value: "liwo"
            - name: POSTGRES_PORT
              value: "{{ .Values.database.postgres_port }}"
            - name: POSTGRES_PWD
              value: "{{ .Values.database.postgres_password }}"
            - name: POSTGRES_HOST
              value: "{{ .Values.prefix }}-{{ .Values.database.name }}"
            - name: POSTGRES_USER
              value: "{{ .Values.database.postgres_user }}"
            {{- range .Values.geoserver.environment_variables_init }}
            - name: "{{ .key }}"
              value: "{{ .value }}"
            {{- end }}
          volumeMounts:
            - name: geoserver-volume
              mountPath: /data
            - name: google-cred
              mountPath: "/root/creds"
              readOnly: true
            - name: config
              mountPath: /bin/entrypoint.sh
              subPath: entrypoint.sh
