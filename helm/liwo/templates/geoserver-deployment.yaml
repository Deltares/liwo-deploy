apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.prefix }}-{{ .Values.geoserver.name }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
{{- if not .Values.geoserver.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      app: {{ .Values.prefix }}-{{ .Values.geoserver.name }}
  template:
    metadata:
    {{- with .Values.geoserver.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        app: {{ .Values.prefix }}-{{ .Values.geoserver.name }}
    spec:
      volumes:        
        - name: geoserver-volume
        {{- if .Values.RWS }}
          nfs:
            server: {{ .Values.nfs.server }}
            path: {{ .Values.nfs.path }}
        {{- else }}
          persistentVolumeClaim:
            claimName: {{ .Values.prefix }}-{{ default "pvc-geoserver" .Values.geoserver.volumeName }}
        {{- end }}
      containers:
        - name: {{ .Values.geoserver.name }}
          image: "{{ .Values.images.geoserver.repository }}:{{ .Values.images.geoserver.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          ports:
            - containerPort: {{ .Values.geoserver.service.port }}
          volumeMounts:
            - name: geoserver-volume
              mountPath: /var/local/geoserver
              subPath: geoserver/data
          resources:
            {{- toYaml .Values.geoserver.resources | nindent 12 }}
          env:
            {{- range .Values.geoserver.environment_variables }}
            - name: {{ .key }}
              value: {{ .value }}
            {{- end }}
          readinessProbe:
            httpGet:
              path: /geoserver/web/
              port: {{ .Values.geoserver.service.port }}
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            failureThreshold: 10
      initContainers:
        - name: download-data
          image: eu.gcr.io/liwo-11205260-011/cloudsync
          command: ['sh', '-c']
          args: ['if [ ! -f geoserver/data-volledig.zip ]; then mkdir geoserver; echo "download geoserver data"; gsutil cp gs://liwo-data/data-volledig.zip geoserver/data-volledig.zip; cd geoserver; unzip data-volledig.zip; fi']
          workingDir: /data
          env:
            {{- range .Values.geoserver.environment_variables_init }}
            - name: {{ .key }}
              value: {{ .value }}
            {{- end }}
          volumeMounts:
            - name: geoserver-volume
              mountPath: /data
